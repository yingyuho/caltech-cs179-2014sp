===========
Compilation
===========

"make" generates the executable "Main1"

The supplied Makefile works for polaris.cms.caltech.edu

=====
Usage
=====

Main1 [POLYNOMIAL_DEGREE]

=========
Questions
=========

c)

[yingyu@polaris:~/git/caltech-cs179-2014sp/lab1]> ./Main1
using 10 primingRuns and  5 repeats, polynomial order of 10
 512 threads per block and 50 max blocks
speedup &  mutex & linear & divtree & nondivtree \\
10^3    &   0.04 &   0.05 &   0.05 &   0.05 \\
10^4    &   0.66 &   0.86 &   0.92 &   0.91 \\
10^5    &   3.94 &   6.27 &   6.73 &   6.84 \\
10^6    &  18.17 &  19.95 &  21.02 &  20.44 \\

d)

[yingyu@polaris:~/git/caltech-cs179-2014sp/lab1]> ./Main1 10
using 10 primingRuns and  5 repeats, polynomial order of 10
 512 threads per block and 50 max blocks
speedup &  mutex & linear & divtree & nondivtree \\
10^3    &   0.05 &   0.05 &   0.05 &   0.05 \\
10^4    &   0.66 &   0.87 &   0.90 &   0.93 \\
10^5    &   4.00 &   6.24 &   6.68 &   6.85 \\
10^6    &  18.37 &  20.16 &  20.96 &  20.70 \\
[yingyu@polaris:~/git/caltech-cs179-2014sp/lab1]> ./Main1 20
using 10 primingRuns and  5 repeats, polynomial order of 20
 512 threads per block and 50 max blocks
speedup &  mutex & linear & divtree & nondivtree \\
10^3    &   0.13 &   0.13 &   0.14 &   0.14 \\
10^4    &   1.31 &   1.73 &   1.82 &   1.82 \\
10^5    &   7.84 &  11.98 &  12.88 &  13.01 \\
10^6    &  34.22 &  33.83 &  36.58 &  35.25 \\
[yingyu@polaris:~/git/caltech-cs179-2014sp/lab1]> ./Main1 50
using 10 primingRuns and  5 repeats, polynomial order of 50
 512 threads per block and 50 max blocks
speedup &  mutex & linear & divtree & nondivtree \\
10^3    &   0.33 &   0.31 &   0.33 &   0.34 \\
10^4    &   3.26 &   4.19 &   4.47 &   4.53 \\
10^5    &  18.82 &  25.60 &  28.09 &  28.17 \\
10^6    &  66.67 &  62.23 &  63.21 &  63.44 \\
[yingyu@polaris:~/git/caltech-cs179-2014sp/lab1]> ./Main1 100
using 10 primingRuns and  5 repeats, polynomial order of 100
 512 threads per block and 50 max blocks
speedup &  mutex & linear & divtree & nondivtree \\
10^3    &   0.49 &   0.47 &   0.48 &   0.49 \\
10^4    &   6.49 &   8.18 &   8.63 &   8.70 \\
10^5    &  35.59 &  42.80 &  46.82 &  46.46 \\
10^6    &  97.79 &  84.71 &  85.49 &  85.63 \\
[yingyu@polaris:~/git/caltech-cs179-2014sp/lab1]> ./Main1 200
using 10 primingRuns and  5 repeats, polynomial order of 200
 512 threads per block and 50 max blocks
speedup &  mutex & linear & divtree & nondivtree \\
10^3    &   0.95 &   0.88 &   0.94 &   0.96 \\
10^4    &  12.86 &  15.57 &  16.31 &  16.18 \\
10^5    &  65.21 &  65.37 &  70.64 &  67.68 \\
10^6    & 121.86 & 103.32 & 103.23 & 104.66 \\

The later three reduction methods have very similar performance. The mutex
method becomes relatively faster when polynomial order is large. 